[{"C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\index.tsx":"1","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\reportWebVitals.ts":"2","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\App.tsx":"3","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\Header\\Header.tsx":"4","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\TodoList\\TodoList.tsx":"5","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\TodoList\\TodoListItem\\TodoListItem.tsx":"6","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\shared\\Checkbox\\CheckboxCustom.tsx":"7","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\TodoList\\TodoListItem\\Form\\Form.tsx":"8","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\shared\\context\\GetAll-todo-context.tsx":"9"},{"size":564,"mtime":1612025043865,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":432,"mtime":1613938671857,"results":"13","hashOfConfig":"11"},{"size":9014,"mtime":1613942472939,"results":"14","hashOfConfig":"11"},{"size":2883,"mtime":1613907497591,"results":"15","hashOfConfig":"11"},{"size":3288,"mtime":1613935902514,"results":"16","hashOfConfig":"11"},{"size":3050,"mtime":1613948345355,"results":"17","hashOfConfig":"11"},{"size":4193,"mtime":1612035806949,"results":"18","hashOfConfig":"11"},{"size":856,"mtime":1612035407281,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1pg59ok",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"22"},"C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\index.tsx",[],["47","48"],"C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\reportWebVitals.ts",[],"C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\App.tsx",["49","50"],"import React, { Fragment } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Header from './Components/Header/Header';\nimport TodoList from './Components/TodoList/TodoList';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\n\n\n\n\n\nfunction App() {\n\n  return (\n    <Fragment>\n        <CssBaseline />\n        <Header />\n        <TodoList />\n    </Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\Header\\Header.tsx",["51","52","53"],"import React, { useCallback, useEffect, useState, useContext } from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport imgLight from \"../../assets/images/bg-desktop-light.jpg\";\r\nimport imgDark from \"../../assets/images/bg-desktop-dark.jpg\";\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField';\r\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\r\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n\r\nimport './Header.scss'\r\nimport { Backdrop, Button, createStyles, Fab, Icon, OutlinedInputProps, Theme } from '@material-ui/core';\r\nimport { Modal } from '@material-ui/core';\r\nimport { Fade } from '@material-ui/core';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport moment from 'moment';\r\nimport { useForm } from 'react-hook-form'\r\nimport { IFormModel } from '../TodoList/TodoListItem/Form/FormModel.model';\r\nimport axios from 'axios';\r\nimport { GetAllContext } from \"../../shared/context/GetAll-todo-context\";\r\nimport { useDebouncedCallback } from 'use-debounce/lib';\r\nimport useDarkMode from \"use-dark-mode\";\r\n\r\n\r\nconst useInputStyle = makeStyles( (theme:Theme) => \r\ncreateStyles({\r\n    root:{\r\n        backgroundColor:\"white\",\r\n        borderRadius:'5px',\r\n    }\r\n}));\r\n\r\nconst InputCustom = (props:TextFieldProps) => {\r\n    const classes = useInputStyle();\r\n    return (\r\n        <TextField InputProps={{classes, disableUnderline:false} as Partial<OutlinedInputProps>} {...props}/>\r\n    )\r\n}\r\n\r\nlet setImageBg:boolean=false;\r\n\r\n\r\nfunction Header() {\r\n    let classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const {register, handleSubmit} = useForm<IFormModel>();\r\n    const [response, setResponse] = useState<any>(null);\r\n    const [searchText, setSearchText] = useState<string>();\r\n    const getAllContext = useContext(GetAllContext);\r\n    const [selectedDate, setSelectedDate] = React.useState<Date>(\r\n        new Date(),\r\n      );\r\n    const darkMode = useDarkMode(false)\r\n\r\n    const handleOpen = () => {\r\n      setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n     setOpen(false);\r\n    };\r\n\r\n    const handleDateChange = (date: any) => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const newTodoItem = useCallback(\r\n     async (dati:IFormModel) => {\r\n\r\n        const data = {\r\n            titolo:dati.titolo,\r\n            giorno:dati.giorno,\r\n            categoria:dati.categoria,\r\n            attivi:true\r\n        }\r\n            let newItem = await axios({ \r\n                method:\"POST\",\r\n                url:'http://localhost:94/api/Todolist/AddNewTask',\r\n                data\r\n             });\r\n\r\n             setResponse(newItem);\r\n             getAllContext.getAll();\r\n        },\r\n        []\r\n    )\r\n\r\n    const handleSearch = useDebouncedCallback(\r\n        async (e:string) => {\r\n\r\n            if(e !== \"\"){\r\n\r\n                const data = {\r\n                    titolo:e\r\n                }\r\n                let search = await axios({\r\n                    method:\"POST\",\r\n                    url:\"http://localhost:94/api/Todolist/SearchTask\",\r\n                    data\r\n                })\r\n                setSearchText(e);\r\n                setResponse(search.statusText);\r\n                getAllContext.tasks(search.data);\r\n\r\n            }else{\r\n                getAllContext.getAll();\r\n            }\r\n           \r\n        },\r\n        800\r\n    )\r\n\r\n    useEffect( () => {}, [response]);\r\n\r\n    const IconModeToggle = () => { \r\n        if(darkMode.value == false) {\r\n            setImageBg = false;\r\n          return (\r\n          <div className=\"header__icon\" onClick={darkMode.enable}>\r\n            <Brightness3Icon className={classes.icon}/>\r\n          </div>\r\n        )\r\n        } else{\r\n            setImageBg = true;\r\n          return ( <div className=\"header__icon\" onClick={darkMode.disable}>\r\n            <Brightness5Icon className={classes.icon}/>\r\n          </div>)\r\n        };\r\n    }\r\n    return (\r\n        <header className={classes.header}>\r\n            <Container maxWidth=\"sm\" className={classes.container}>\r\n                <Grid container spacing={3} justify=\"center\">\r\n                    <Grid item xs={6} zeroMinWidth>\r\n                        <h1 className=\"header__title\">TODO</h1>\r\n                    </Grid>\r\n                    <Grid item xs={6} zeroMinWidth>\r\n                       {IconModeToggle()}\r\n                    </Grid>\r\n                </Grid>\r\n                <form autoComplete='off'> \r\n                <Grid container justify=\"space-between\" spacing={1}>\r\n                    <Grid item xs={11}>\r\n                      <InputCustom  className={classes.input} name='titolo' onChange={ (e) => { handleSearch.callback(e.target.value) }} fullWidth label=\"Ricerca un task\" variant=\"filled\" />\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Fab color=\"primary\" aria-label=\"add\" onClick={handleOpen}>\r\n                        <AddIcon />\r\n                      </Fab>\r\n                    </Grid>\r\n                </Grid>\r\n                </form>\r\n            </Container>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <form autoComplete=\"off\" className={classes.paper} onSubmit={handleSubmit(newTodoItem)}>\r\n                        <h2>ADD NEW TASK</h2>\r\n                        <Grid container direction=\"column\" spacing={3}>\r\n                            <Grid item>                               \r\n                                <TextField inputRef={register} name=\"titolo\" label=\"Task\" />\r\n                            </Grid>\r\n                            <Grid item>                               \r\n                                <TextField inputRef={register} name=\"categoria\" label=\"categoria\" />\r\n                            </Grid>\r\n                            <Grid item>                               \r\n                            <MuiPickersUtilsProvider utils={MomentUtils} libInstance={moment}>\r\n                                <KeyboardDatePicker\r\n                                    margin=\"normal\"\r\n                                    inputRef={register}\r\n                                    name=\"giorno\"\r\n                                    id=\"date-picker-dialog\"\r\n                                    label=\"Giorno\"\r\n                                    format=\"YYYY/MM/DD\"\r\n                                    value={selectedDate}\r\n                                    onChange={handleDateChange}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }} \r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button \r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    type=\"submit\"\r\n                                    onClick={handleClose}\r\n                                    endIcon={ <Icon>send</Icon> }\r\n                                >\r\n                                    Invia\r\n                                    </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Fade>\r\n            </Modal>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nconsole.log(setImageBg);\r\n\r\nconst imgBg = (setImageBg)?imgDark:imgLight;\r\n\r\nconst useStyles = makeStyles({\r\n    header:{\r\n        backgroundImage:`url(${ imgBg })`,\r\n        backgroundPosition:\"center center\",\r\n        backgroundSize:\"cover\",\r\n        backgroundRepeat:\"no-repeat\",\r\n        width: \"100%\",\r\n        height: \"300px\",\r\n        paddingTop:\"3em\"\r\n    },\r\n    container:{ height:'100%'},\r\n    input:{\r\n        backgroundColor:\"#fff\",\r\n        borderRadius:'5px',\r\n        width:\"100%\"\r\n    },\r\n    icon:{\r\n        color:'#fff',\r\n        fontSize:'2rem',\r\n        transform:'scaleX(-1)'\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      paper: {\r\n        backgroundColor: \"#fff\",\r\n        border: '2px solid #000',\r\n        padding: \"20px\",\r\n      },\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport default Header\r\n\r\n","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\TodoList\\TodoList.tsx",["54","55","56","57","58","59","60"],"import React, { useCallback, useEffect, useState, useContext } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport './TodoList.scss';\r\nimport axios from \"axios\";\r\nimport TodoListItem from \"./TodoListItem/TodoListItem\";\r\nimport { GetAllContext } from \"../../shared/context/GetAll-todo-context\";\r\nimport { ITodoList } from \"../../shared/todolist.model\";\r\n\r\n\r\n\r\nconst useStyle = makeStyles({\r\n  radio: {\r\n    \"&:hover\": \"transparent\",\r\n  },\r\n  todolist:{\r\n      transform:'translateY(-107px)',\r\n      \r\n  },\r\n  todoListItem:{\r\n    backgroundColor:\"#fff\"\r\n  }\r\n});\r\n\r\n\r\nfunction TodoList() {\r\n\r\n  const classes = useStyle();\r\n  const  getAllContext = useContext(GetAllContext);\r\n  const [response, setResponse] = useState<any>(null);\r\n\r\n  const  deleteTask = () => {  getAllContext.getAll(); };\r\n  const updateTask = () => { getAllContext.getAll(); }\r\n\r\n  const filter =  useCallback( async (value:boolean) => {\r\n\r\n    const data ={\r\n      attivi:value\r\n    }\r\n\r\n    const filterActiveComplete = await axios({\r\n      method:'POST',\r\n      url:'http://localhost:94/api/TodoList/SearchTask',\r\n      data\r\n    });\r\n\r\n    getAllContext.tasks(filterActiveComplete.data);\r\n    setResponse(filterActiveComplete.statusText);\r\n  }, [] );\r\n\r\n  const deleteCompleted = useCallback(\r\n    async () => {\r\n      \r\n      const deleteAllCompleted = await axios({\r\n        method:\"DELETE\",\r\n        url:\"http://localhost:94/api/TodoList/DeleteCompleted\"\r\n      });\r\n\r\n      console.log(deleteAllCompleted);\r\n    \r\n      setResponse(deleteAllCompleted.data);\r\n      updateTask();\r\n\r\n    }, []\r\n  ); \r\n\r\n  useEffect( () => { getAllContext.getAll(); }, [] );\r\n  useEffect(() => {}, [response]);\r\n\r\n  const taskMap = getAllContext.task.map( (item:ITodoList ) => {\r\n    return (\r\n     \r\n        <TodoListItem key={item.id} todo={item} handler={ deleteTask } update={ updateTask }/>\r\n     \r\n    )\r\n  } );\r\n \r\n  \r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n            <List\r\n            className={classes.todolist}\r\n            >\r\n                {taskMap}\r\n                <ListItem className=\"todoList__nav\">         \r\n                        <p>5 mins left</p>\r\n                        <div className=\"todoList__nav--controllers\">\r\n                            <p><a onClick={ () => { getAllContext.getAll() } }>All</a></p>\r\n                            <p><a onClick={ () => { filter(true) } } >Active</a></p>\r\n                            <p><a onClick={ () => { filter(false) } }>Completed</a></p>\r\n                        </div>\r\n                        <p><a onClick={ () => deleteCompleted() }>Clear Completed</a></p>\r\n                </ListItem>\r\n            </List>\r\n      </Container>\r\n  );\r\n}\r\n\r\n\r\nexport default TodoList;\r\n","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\TodoList\\TodoListItem\\TodoListItem.tsx",["61"],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport CheckboxCustom from '../../../shared/Checkbox/CheckboxCustom';\r\nimport moment from 'moment';\r\nimport './TodoListItem.scss';\r\nimport axios from 'axios';\r\nimport { Form } from './Form/Form';\r\nimport { ITodoList } from '../../../shared/todolist.model';\r\nimport Draggable from 'react-draggable';\r\n\r\n\r\n\r\nconst useStyle = makeStyles({\r\n    radio: {\r\n      \"&:hover\": \"transparent\",\r\n    },\r\n    todolist:{\r\n        transform:'translateY(-107px)',\r\n        boxShadow: \"5px 5px 20px #d1d1d1\"\r\n    },\r\n    todoListItem:{\r\n      backgroundColor:\"#fff\",\r\n      borderBottom:\"1px solid silver\"\r\n      \r\n      \r\n    }\r\n  });\r\n\r\nfunction TodoListItem(props:{todo:ITodoList, handler:any, update:any}) {\r\n  \r\n  const {todo} = props;\r\n  const {handler, update}:any = props;\r\n  \r\n/**\r\n * @type any\r\n * Reponse State\r\n */\r\nconst [response, setResponse] = useState<any>(null);\r\n\r\n/**\r\n* \r\n* @type boolean\r\n* Open /Close modal Toggle\r\n*\r\n*/\r\n      \r\n const [open, setOpen] = useState<boolean>(false);\r\n\r\n/**\r\n * @var classes \r\n * @type function\r\n */\r\n\r\nconst classes= useStyle();\r\n/**\r\n * @var data\r\n * @type Moment/Date\r\n */\r\nconst data = moment(todo.giorno).format(\"DD/MM/YY\");\r\n\r\n\r\nuseEffect(() => {\r\n     \r\n      \r\n}, [response]);\r\n\r\nconst deleteTask = async (id:number) => {\r\n  const data = {\r\n    id\r\n  }\r\n\r\n  let deleteRequest = await axios({\r\n    method:'DELETE',\r\n    url:'http://localhost:94/api/TodoList/DeleteTask',\r\n    data\r\n  });\r\n  handler();\r\n  setResponse(deleteRequest);\r\n}\r\n\r\nconst handleClose = () => {\r\n  setOpen(false);\r\n};\r\n\r\nconst handleOpen = () => {\r\n  setOpen(true);\r\n};\r\n\r\nconst mouseDrag = (e:MouseEvent) => {\r\n  console.log(e);\r\n  \r\n}\r\n\r\nconst ref = React.createRef();\r\n\r\n    return (    \r\n      <Fragment>\r\n        <Draggable\r\n                  axis=\"y\"\r\n                  handle=\".handle\"\r\n                 >\r\n            <div className=\"handle\">\r\n            <ListItem className={classes.todoListItem} >\r\n                <ListItemAvatar>\r\n                    <CheckboxCustom todo={todo} />\r\n                </ListItemAvatar>\r\n                <ListItemText primary={todo.titolo} secondary={data} />\r\n                <ListItemSecondaryAction>\r\n                <IconButton edge=\"end\" aria-label=\"modify\" onClick={handleOpen}>\r\n                    <CreateIcon />\r\n                </IconButton>\r\n                <IconButton onClick={() => deleteTask(todo.id) } edge=\"end\" aria-label=\"delete\">\r\n                    <ClearIcon />\r\n                </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n            </div>\r\n         </Draggable>\r\n            <Form ref={ref} todoItem={todo} open={open} onCloseModal={handleClose} onUpdate={update} />\r\n      </Fragment>\r\n    )\r\n}\r\n\r\nexport default TodoListItem\r\n","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\shared\\Checkbox\\CheckboxCustom.tsx",["62","63"],"import React, { useCallback, useEffect, useState } from 'react'\r\n\r\nimport {makeStyles } from '@material-ui/core';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\nimport clsx from 'clsx';\r\nimport axios from 'axios';\r\nimport { ITodoList } from '../todolist.model';\r\n\r\n\r\n\r\n\r\nconst styleCheck = makeStyles({\r\n    root:{\r\n      '&:hover': {\r\n        backgroundColor: 'transparent',\r\n      },\r\n    },\r\n    icon: {\r\n      borderRadius: \"50%\",\r\n      width: 16,\r\n      height: 16,\r\n      boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n      backgroundColor: '#f5f8fa',\r\n      '$root.Mui-focusVisible &': {\r\n        outline: '2px auto rgba(19,124,189,.6)',\r\n        outlineOffset: 2,\r\n      },\r\n      'input:hover ~ &': {\r\n        backgroundColor: '#ebf1f5',\r\n      },\r\n      'input:disabled ~ &': {\r\n        boxShadow: 'none',\r\n        background: 'rgba(206,217,224,.5)',\r\n      },\r\n    },\r\n    checkedIcon: {\r\n      backgroundColor: '#137cbd',\r\n      backgroundImage: 'linear-gradient(180deg,hsl(192, 100%, 67%), hsl(280, 87%, 65%))',\r\n      '&:before': {\r\n        display: 'block',\r\n        width: 16,\r\n        height: 16,\r\n        backgroundImage:\r\n          \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n          \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n          \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\r\n        content: '\"\"',\r\n      },\r\n      'input:hover ~ &': {\r\n        backgroundColor: '#106ba3',\r\n      },\r\n    },\r\n});\r\n\r\nfunction CheckboxCustom( props:{todo:ITodoList} ) {\r\n\r\n  const classes = styleCheck();\r\n  \r\n    const [completed, setCompleted] = useState<boolean>(false);\r\n    const [response, setResponse] = useState<any>(null);\r\n    const [checked, setChecked] = useState(props.todo.attivi);\r\n\r\n    let activeTask = () => {\r\n      setCompleted( c => !c );\r\n      \r\n      UpdateActiveTask(completed);\r\n\r\n    }\r\n    \r\n    useEffect(() => {}, [response]);\r\n    \r\n    let UpdateActiveTask = useCallback( async (value:boolean) => {\r\n   \r\n     \r\n      let data = {\r\n        ...props.todo,\r\n        id:props.todo.id,\r\n        attivi:value\r\n      }\r\n      setChecked(value);\r\n\r\n      let updateStatus = await axios({\r\n         method:'PUT',\r\n         url:'http://localhost:94/api/TodoList/UpdateTask', \r\n         data\r\n      });\r\n\r\n      setResponse(updateStatus);\r\n    }, []);\r\n\r\n    const iconClass = (props.todo.attivi) ? classes.icon : classes.checkedIcon;\r\n    console.log(iconClass);\r\n    \r\n    return (\r\n\r\n    <Checkbox\r\n    disableRipple\r\n    color=\"default\"\r\n    checked={checked === false}\r\n    className={classes.root}\r\n    checkedIcon={<span className={ clsx(  classes.icon, classes.checkedIcon ) }/>}\r\n    icon={<span className={classes.icon} />}\r\n    onChange={ () => activeTask() }\r\n    {...props} />\r\n    \r\n    \r\n    )\r\n   \r\n}\r\n\r\nexport default CheckboxCustom\r\n","C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\Components\\TodoList\\TodoListItem\\Form\\Form.tsx",["64","65","66"],"import MomentUtils from '@date-io/moment'\r\nimport { Backdrop, Button, Fade, Grid, makeStyles, Modal, TextField, TextFieldProps } from '@material-ui/core'\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport React, { useEffect, useState, useCallback } from 'react'\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { useForm } from 'react-hook-form'\r\nimport { IFormModel } from './FormModel.model'\r\n\r\nconst useStyle = makeStyles({\r\n    paper: {\r\n        backgroundColor: \"#fff\",\r\n        border: '2px solid #000',\r\n        boxShadow: \"3px 3px 3px 1px #d1d1d1\",\r\n        padding: '20px',\r\n      },\r\n      button: {\r\n        margin: '5px',\r\n      },\r\n      modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }\r\n})\r\n\r\n\r\n\r\nexport const Form = React.forwardRef(( {todoItem, open, onCloseModal, onUpdate }:any, ref ) => {\r\n\r\n    let classes = useStyle();\r\n\r\n    const [selectedDate, setSelectedDate] = useState<Date>(\r\n        new Date(todoItem.giorno),\r\n    );\r\n\r\n    /**\r\n     * @type any\r\n     * Reponse State\r\n     */\r\n    \r\n    const [response, setResponse] = useState<any>(null);\r\n\r\n    const {register, handleSubmit, setValue} = useForm<IFormModel>({mode:'onBlur'});\r\n    const updateData = useCallback( async (dati:IFormModel) => {\r\n      let data = {\r\n        id:todoItem.id,\r\n        titolo:dati.titolo,\r\n        categoria:dati.categoria,\r\n        giorno:dati.giorno,\r\n        attivi:todoItem.attivi\r\n    }\r\n    let updateTask = await axios({\r\n      method:\"PUT\",\r\n      url:\"http://localhost:94/api/TodoList/UpdateTask\",\r\n      data\r\n    })\r\n\r\n    onUpdate();\r\n    setResponse(updateTask);\r\n    }, [])\r\n  \r\n    useEffect(() => {\r\n      \r\n    }, [response]);\r\n\r\n    \r\n    \r\n      ///Modale\r\n    \r\n      const close = () => {\r\n          onCloseModal()\r\n      }\r\n\r\n      const handleDataChange = (data:any) => {\r\n            setSelectedDate(data)\r\n      }\r\n      \r\n      \r\n \r\n    return (\r\n        <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={close}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n        ref={ref}\r\n      >\r\n        <Fade in={open}>\r\n        <form  autoComplete=\"off\" noValidate className={classes.paper} onSubmit={handleSubmit(updateData)}>\r\n        <h2 id=\"transition-modal-title\">MODIFICA DEL TASK</h2>\r\n        <Grid container direction=\"column\"  spacing={3}>\r\n          <Grid item>\r\n            <TextField \r\n                required\r\n                inputRef={register}\r\n                label=\"Task\"\r\n                name=\"titolo\"\r\n                defaultValue={todoItem.titolo} \r\n                />\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField \r\n                required \r\n                label=\"Categoria\"\r\n                inputRef={register}\r\n                name=\"categoria\"\r\n                defaultValue={todoItem.categoria}\r\n                />\r\n          </Grid>\r\n          <Grid item>    \r\n            <MuiPickersUtilsProvider utils={MomentUtils} libInstance={moment}>\r\n            <KeyboardDatePicker\r\n          margin=\"normal\"\r\n          inputRef={register}\r\n          name=\"giorno\"\r\n          id=\"date-picker-dialog\"\r\n          label=\"Giorno\"\r\n          format=\"YYYY/MM/DD\"\r\n          value={selectedDate}\r\n          onChange={handleDataChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }} />\r\n            </MuiPickersUtilsProvider>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              className={classes.button}\r\n              startIcon={<SaveIcon />}\r\n              onClick={close}\r\n              type='submit'\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n        </Grid> {/* Container Grid */}\r\n      </form>\r\n      </Fade>\r\n    </Modal>\r\n\r\n    )\r\n})\r\n",["67","68"],"C:\\Users\\is\\Documents\\TodoList\\todo_list\\src\\shared\\context\\GetAll-todo-context.tsx",["69"],"import axios from 'axios';\r\nimport React, { createContext, useCallback, useState } from 'react';\r\nimport { ITodoList } from '../todolist.model';\r\n\r\nexport const GetAllContext = createContext<any>({\r\n    task:[],\r\n    tasks: () =>{},\r\n    getAll: () =>{}\r\n});\r\n\r\nconst GetAllProvider = (props:any) => {\r\n\r\n    const [ task, setTask] = useState([]);\r\n\r\n    const handlerTask = (value:any) => {\r\n        setTask(value)\r\n        console.log(task);\r\n        \r\n    }\r\n\r\n    const GetAll = useCallback( async () => {\r\n        const todolist:any= await axios( 'http://localhost:94/api/TodoList/GetAll' );\r\n         setTask(todolist.data);\r\n      }, []);\r\n\r\n    return (\r\n        <GetAllContext.Provider value={{task, tasks:handlerTask, getAll:GetAll}}>\r\n            {props.children}\r\n        </GetAllContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GetAllProvider\r\n\r\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":5,"column":10,"nodeType":"76","messageId":"77","endLine":5,"endColumn":23},{"ruleId":"74","severity":1,"message":"78","line":5,"column":25,"nodeType":"76","messageId":"77","endLine":5,"endColumn":39},{"ruleId":"74","severity":1,"message":"79","line":53,"column":12,"nodeType":"76","messageId":"77","endLine":53,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":90,"column":9,"nodeType":"82","endLine":90,"endColumn":11,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":121,"column":27,"nodeType":"86","messageId":"87","endLine":121,"endColumn":29},{"ruleId":"80","severity":1,"message":"81","line":51,"column":6,"nodeType":"82","endLine":51,"endColumn":8,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"89","line":66,"column":8,"nodeType":"82","endLine":66,"endColumn":10,"suggestions":"90"},{"ruleId":"80","severity":1,"message":"91","line":69,"column":49,"nodeType":"82","endLine":69,"endColumn":51,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":90,"column":32,"nodeType":"95","endLine":90,"endColumn":80},{"ruleId":"93","severity":1,"message":"94","line":91,"column":32,"nodeType":"95","endLine":91,"endColumn":71},{"ruleId":"93","severity":1,"message":"94","line":92,"column":32,"nodeType":"95","endLine":92,"endColumn":71},{"ruleId":"93","severity":1,"message":"94","line":94,"column":28,"nodeType":"95","endLine":94,"endColumn":67},{"ruleId":"74","severity":1,"message":"96","line":96,"column":7,"nodeType":"76","messageId":"77","endLine":96,"endColumn":16},{"ruleId":"74","severity":1,"message":"97","line":4,"column":20,"nodeType":"76","messageId":"77","endLine":4,"endColumn":33},{"ruleId":"80","severity":1,"message":"98","line":89,"column":8,"nodeType":"82","endLine":89,"endColumn":10,"suggestions":"99"},{"ruleId":"74","severity":1,"message":"100","line":2,"column":70,"nodeType":"76","messageId":"77","endLine":2,"endColumn":84},{"ruleId":"74","severity":1,"message":"101","line":45,"column":36,"nodeType":"76","messageId":"77","endLine":45,"endColumn":44},{"ruleId":"80","severity":1,"message":"102","line":62,"column":8,"nodeType":"82","endLine":62,"endColumn":10,"suggestions":"103"},{"ruleId":"70","replacedBy":"104"},{"ruleId":"72","replacedBy":"105"},{"ruleId":"74","severity":1,"message":"106","line":3,"column":10,"nodeType":"76","messageId":"77","endLine":3,"endColumn":19},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"@typescript-eslint/no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'createMuiTheme' is defined but never used.","'searchText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'getAllContext'. Either include it or remove the dependency array.","ArrayExpression",["109"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["110"],"React Hook useCallback has a missing dependency: 'updateTask'. Either include it or remove the dependency array.",["111"],"React Hook useEffect has a missing dependency: 'getAllContext'. Either include it or remove the dependency array.",["112"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'mouseDrag' is assigned a value but never used.","'CheckboxProps' is defined but never used.","React Hook useCallback has a missing dependency: 'props.todo'. Either include it or remove the dependency array.",["113"],"'TextFieldProps' is defined but never used.","'setValue' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'onUpdate', 'todoItem.attivi', and 'todoItem.id'. Either include them or remove the dependency array. If 'onUpdate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["114"],["107"],["108"],"'ITodoList' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"115","fix":"117"},{"desc":"118","fix":"119"},{"desc":"115","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [getAllContext]",{"range":"125","text":"126"},{"range":"127","text":"126"},"Update the dependencies array to be: [updateTask]",{"range":"128","text":"129"},{"range":"130","text":"126"},"Update the dependencies array to be: [props.todo]",{"range":"131","text":"132"},"Update the dependencies array to be: [onUpdate, todoItem.attivi, todoItem.id]",{"range":"133","text":"134"},[2947,2949],"[getAllContext]",[1395,1397],[1743,1745],"[updateTask]",[1804,1806],[2546,2548],"[props.todo]",[1761,1763],"[onUpdate, todoItem.attivi, todoItem.id]"]